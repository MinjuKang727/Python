#######################
# 2-3. 폭발물 설치 범인 추적 #
#######################

## 미션1 ##

# 사건 : 폭발물을 설치한 범인을 찾기 위한 단서 찾기
# 시청에서 보내준 33호 내부에 설치된 CCTV파일의 개수가 맞지 않다.



# [ 학습 자료 ] #
# # 2차원 리스트 : 리스트 안에 리스타가 들어 있는 형태
# double_list = [['a', 'b'], ['c', 'd'], ['e', 'f']]
# # 인덱스 : 리스트 요소의 순서로 0부터 시작
# list_test = [[10, 20], [30, 40], [50, 60]]
# #list_test인덱스 : 0       1         2
# # 요소 접근 방법 : 리스트[리스트 인덱스][내부 리스트 인덱스]
# print(list_test[1]) # 실행 결과 : [30, 40]
# # print(list_test[0][2]) # IndexError: list index out of range
# print(list_test[0][1]) # 실행 결과 : 20

# 반복문 : 같은 일을 반복할 때 사용하는 제어문
# 구조 : while_break
# while 조건이 참인 동안 반복 수행
# 반복을 중지할 때 break 사용

# count = 5
# while count > 0 :
#     print(count)
#     count = count - 1
#     if count == 1 :
#         break
# # 실행 결과 #
# 5
# 4
# 3
# 2

# # 비교 연산자 : 숫자, 문자열 등 두 항목을 서로 비교하는 연산자
# # x == y : x와 y가 같다.
# # x != y : x와 y는 같지 않다.
# # 결과는 True 또는 False 반환
# print(1 != 'one') # 실행 결과 : True
# print('Sun' == 'Sun') # 실행 결과 : True
# print('Moon' == 'moon') # 실행 결과 : False

file_list = [[1,'012500'], [2,'012501'], [3,'012502'], [4,'012503'], [5,'012504'], [6,'012505'], [7,'012506'], [8,'012507'], [9,'012508'], [10,'012509'], [11,'012510'], [12,'012511'], [13,'012512'], [14,'012513'], [15,'012514'], [16,'012515'], [17,'012516'], [18,'012517'], [19,'012518'], [20,'012519'], [21,'012520'], [22,'012521'], [23,'012522'], [24,'012523'], [25,'012600'], [26,'012601'], [27,'012602'], [28,'012603'], [29,'012604'], [30,'012605'], [31,'012606'], [32,'012607'], [33,'012608'], [34,'012609'], [35,'012610'], [36,'012611'], [37,'012612'], [38,'012613'], [39,'012614'], [40,'012615'], [41,'012616'], [42,'012617'], [43,'012618'], [44,'012619'], [45,'012620'], [46,'012621'], [47,'012622'], [48,'012623'], [49,'012700'], [50,'012701'], [51,'012702'], [52,'012703'], [53,'012704'], [54,'012705'], [55,'012706'], [56,'012707'], [57,'012708'], [58,'012709'], [59,'012710'], [60,'012711'], [61,'012712'], [62,'012713'], [63,'012714'], [64,'012715'], [65,'012716'], [66,'012717'], [67,'012718'], [68,'012719'], [69,'012720'], [70,'012721'], [71,'012722'], [72,'012723'],  [97,'012900'], [98,'012901'],[99,'012902'],[100,'012903'],[101,'012904'], [102,'012905'], [103,'012906'], [104,'012907'], [105,'012908'], [106,'012909'], [107,'012910'], [108,'012911'], [109,'012912'], [110,'012913'], [111,'012914'], [112,'012915'], [113,'012916'], [114,'012917'], [115,'012918'], [116,'012919'], [117,'012920'], [118,'012921'], [119,'012922'], [120,'012923'], [121,'013000'], [122,'013001'], [123,'013002'], [124,'013003'], [125,'013004'], [126,'013005'], [127,'013006'], [128,'013007'], [129,'013008'], [130,'013009'], [131,'013010'], [132,'013011'], [133,'013012'], [134,'013013'], [135,'013014'], [136,'013015'], [137,'013016'], [138,'013017'], [139,'013018'], [140,'013019'], [141,'013020'], [142,'013021'], [143,'013022'], [144,'013023'], [145,'013100'], [146,'013101'], [147,'013102'], [148,'013103'], [149,'013104'], [150,'013105'], [151,'013106'], [152,'013107'], [153,'013108'], [154,'013109'], [155,'013110'], [156,'013111'], [157,'013112'], [158,'013113'], [159,'013114'], [160,'013115'], [161,'013116'], [162,'013117'], [163,'013118'], [164,'013119'], [165,'013120'], [166,'013121'], [167,'013122'], [168,'013123']]
# 분량 : 총 7일(파일 1개 당 1시간)
# (총 파일 개수) = (하루 파일 분량) * (일 수)
# 총 파일 개수
total = 24 * 7
# 받은 파일 개수
print(len(file_list)) # 실행 결과 : 144


# 없어진 파일 구간 확인하기
i = 0
while i < len(file_list) :
    if file_list[i+1][0] - file_list[i][0] != 1 :
        print(file_list[i][0], file_list[i+1][0])
        break
    i = i + 1

# 시간대 확인하기
i = 0
while i < len(file_list) :
    if file_list[i+1][0] - file_list[i][0] != 1 :
        print(file_list[i][1], file_list[i+1][1])
        break
    i = i + 1
# 실행 결과 #
# 012723 012900
# ~1월 27일 23시, 1월 29일 00시~ 사이에 파일이 사라짐.
# 그러므로 사라진 파일 날짜는 0128 

## 미션2 ##

# 사건 : 사라진 시간대에 해당하는 출입 명단을 우선 확보하자!

# # 포함 연산자 : 요소의 존재 여부를 판단하는 연산자
# # x in y : x가 y 내에 존재한다.
# # x not in y : x가 y 내에 존재하지 않는다.
# if 'a' in ['a', 'b', 'c'] :
#     print('a exists')
# # 실행 결과 : a exists

entrance_list = [['sophia', "6d 61 6e 61 67 65 6d 65 6e 74 20 73 75 70 70 6f 72 74 20 74 65 61 6d"],
              ['noah', "74 65 63 68 6e 69 63 61 6c 20 73 75 70 70 6f 72 74 20 74 65 61 6d"],
              ['jacob', "73 65 63 74 69 6f 6e 20 6f 66 20 70 65 72 73 6f 6e 6e 65 6c"],
              ['oliva', '6d 61 6e 61 67 65 6d 65 6e 74 20 64 65 70 61 72 74 6d 65 6e 74'],
              ['emily', "6d 61 6e 61 67 65 6d 65 6e 74 20 73 75 70 70 6f 72 74 20 74 65 61 6d"],
              ['isabella', "73 65 63 74 69 6f 6e 20 6f 66 20 70 65 72 73 6f 6e 6e 65 6c"],
              ['ethan', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['owen', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['jack', "66 69 6e 61 6e 63 65 20 61 63 63 6f 75 6e 74 69 6e 67 20 74 65 61 6d"],
              ['connor', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['ethan', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['david', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['levi', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['julian', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['daniel', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['samuel', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['henry', "74 65 63 68 6e 69 63 61 6c 20 73 75 70 70 6f 72 74 20 74 65 61 6d"],
              ['jack', "66 69 6e 61 6e 63 65 20 61 63 63 6f 75 6e 74 69 6e 67 20 74 65 61 6d"],
              ['lsaac', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['jacob', "73 65 63 74 69 6f 6e 20 6f 66 20 70 65 72 73 6f 6e 6e 65 6c"],
              ['aiden', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['daniel', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['james', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['mason', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['joseph', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['julian', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['jack', "66 69 6e 61 6e 63 65 20 61 63 63 6f 75 6e 74 69 6e 67 20 74 65 61 6d"],
              ['adam', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['ezra', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['sophia', "6d 61 6e 61 67 65 6d 65 6e 74 20 73 75 70 70 6f 72 74 20 74 65 61 6d"],
              ['owen', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['aiden', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['hunter', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['luke', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['ezra', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['connor', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['amy', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['hunter', "61 64 6d 69 6e 69 73 74 72 61 74 69 6f 6e 20 64 65 70 61 72 74 6d 65 6e 74"],
              ['noah', "74 65 63 68 6e 69 63 61 6c 20 73 75 70 70 6f 72 74 20 74 65 61 6d"],
              ['emily', "6d 61 6e 61 67 65 6d 65 6e 74 20 73 75 70 70 6f 72 74 20 74 65 61 6d"],
              ['jayden', "77 6b 6b 70 73 3a 2f 2f 62 75 69 6c 64 65 72 62 75 67 2e 64 65 6d 2f 6d 61 69 6e 2f 31 5f 34 30 79 41 44 74 69 62 38"]]
              
# 해당 시간대에 시청에 출입한 인원 확인하기
print(len(entrance_list)) # 실행 결과 : 41
#  용의자 리스트
suspects_list = []

for i in range(len(entrance_list)) :
    if entrance_list[i] not in suspects_list :
        suspects_list.append(entrance_list[i])
print(len(suspects_list)) # 실행 결과 : 27

## 미션3 ##
# 16진수란? (Hexadecimal number, hex number)
# 큰 수와 문자를 간결하게 나타내는 16진수 표기법
# 10진수 전수 10개 + 추가 기호 6개를 이용하여 문자 표현
# bytes.fromhex(변환할 값).decode()
# word = '48 69 20 74 68 65 72 65'
# print(bytes.fromhex(word).decode()) # 실행 결과 : Hi there
# bytes.fromhex(값).decode() : 16진수 바이트 코드를 문자열로 변환하는 함수

# 용의자들의 부서를 확인하자.
# 용의자 부서 리스트
departments_list = []
for suspect in suspects_list :
    department = bytes.fromhex(suspect[1]).decode()
    if department not in departments_list :
        departments_list.append(department)
print(departments_list)
# 실행 결과
# ['management support team', 'technical support team', 'section of personnel', 'management department', 'administration department', 'finance accounting team', 'wkkps://builderbug.dem/main/1_40yADtib8']

# 수상한 부서명
suspect_code = 'wkkps://builderbug.dem/main/1_40yADtib8'

# 용의자의 이름을 확인하자!
for suspect in suspects_list :
    department = bytes.fromhex(suspect[1]).decode()
    if department == suspect_code :
        print(suspect[0])
# 실행 결과 #
# jayden