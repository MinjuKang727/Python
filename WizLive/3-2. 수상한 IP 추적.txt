#######################
# 3-2. 수상한 IP 추적 #
#######################

## 미션1 ##

# 사건 :  해커의 IP를 추적하자!
# 힌트 : 같은 IP가 중복되면 행동 기록을 삭제하자!

reduced_log = [{'time': '1014', 'ip': '89.149.233.0', 'type': 'trade', 'item': 'wiz asset', 'price': 40000, 'res_code': 504}, {'time': '1508', 'ip': '89.149.233.20', 'type': 'trade', 'item': 'wiz asset', 'price': 45000, 'id': 'haha160'}, {'time': '1500', 'ip': '89.149.233.30', 'type': 'trade', 'item': 'wiz asset', 'price': 5000, 'id': 'son1257'}, {'time': '1048', 'ip': '89.149.233.3', 'type': 'trade', 'item': 'wiz asset', 'price': 5000, 'id': 'wyre97'}, {'time': '1353', 'ip': '89.149.233.48', 'type': 'trade', 'item': 'wiz asset', 'price': 5000, 'id': 'lala20'},{'time': '1510', 'ip': '89.149.233.30', 'type': 'trade', 'item': 'wiz asset', 'price': 6000, 'id': 'son1257'}, {'time': '1248', 'ip': '89.149.233.3', 'type': 'trade', 'item': 'wiz asset', 'price': 5000, 'id': 'wyre97'}, {'time': '1553', 'ip': '89.149.233.48', 'type': 'trade', 'item': 'wiz asset', 'price': 5000, 'id': 'lala20'}]

ip_list = []

for data in reduced_log :
    if data['ip'] not in ip_list :
        ip_list.append(data['ip'])
        
print(ip_list)
# 실행 결과 #
# ['89.149.233.0', '89.149.233.20', '89.149.233.30', '89.149.233.3', '89.149.233.48']

## 미션2 ##

# 사건 : 조작된 IP의 진짜 IP를 찾기 위해 FPN 서버의 데이터 베이스에서 조작되기 전 IP 주소 기록을 찾아리!

'''
딕셔러니 : 연관된 요소들의 짝을 배열하는 사전 형태의 자료형
key와 value 쌍을 ','로 구분하여 나열
순서가 없고 같은 key를 중복하여 사용 불가
선언 : 변수 = { key1 : value1, key2 : value2, ... }
'''
# sample_dict1 = { 
#     'month1' : 'January', 
#     'month2' : 'February' 
# }

# item : key에 value를 대응시킨 쌍
# sample_dict2 = {
#     'name' : 'Ann', 
#     'age' : 13, 
#     'grade' : 6 
# }

'''
딕셔너리 요소 접근
- 인덱스가 아닌 key, value, item 단위로 접근
- 딕셔너리 전용 함수 : keys(), values(), items()
사전객체.keys()
사전객체.values()
사전객체.items()
'''
# football = { 
#     'Messi' : 'Barcelona',
#     'Ronaldo' : 'Juventus'
# }

# print(football.keys()) # 실행 결과 : dict_keys(['Messi', 'Ronaldo'])
# print(football.values()) # 실행 결과 : dict_values(['Barcelona', 'Juventus'])
# print(football.items()) # 실행 결과 : dict_items([('Messi', 'Barcelona'), ('Ronaldo', 'Juventus')])

'''
key와 value에 개별적 접근
key변수, value변수 in 사전객체.items()
'''
# for key, value in football.items() :
#     print(key)
#     print(value)
    
# 실행 결과 #
# Messi
# Barcelona
# Ronaldo
# Juventus

fpn_db = {'41.222.235.255':'41.93.255.255','154.65.127.255':'102.36.183.255','196.13.123.255':'196.13.175.255','102.38.191.255':'102.69.223.255','102.131.16.255':'102.69.247.255','102.223.173.255':'43.251.120.0','43.246.152.0':'43.247.104.0','27.117.192.0':'46.235.128.0','185.104.203.255':'185.110.39.255','93.114.189.255':'92.114.55.255','89.43.173.255':'89.42.175.255','	89.37.59.255':'85.204.192.255','212.77.31.255':'178.170.211.255','204.231.240.255':'37.203.199.255','109.234.103.255':'212.120.159.255','217.173.223.255':'185.217.20.0','185.176.128.0':'91.214.173.0','89.149.233.36':'218.155.162.150','89.149.233.0':'119.235.64.0','218.150.009.000':'218.150.980.709','45.221.240':'106.246.246.138','160.119.108':'164.160.255.255','45.222.191.255':'45.221.24.255','41.66.255.255':'196.43.242.255','196.43.225.255':'196.43.207.255','196.43.194.255':'196.201.2.255','41.189.191.255':'41.191.247.255','169.239.251.255':'192.251.202.255','193.108.23.255':'193.108.28.255','196.40.159.255':'196.201.5.255'}
real_ip = ''

for ip1, ip2 in fpn_db.items() :
    if ip1 in ip_list :
        real_ip = ip2
        
print(real_ip) # 실행 결과 : 119.235.64.0
        
## 미션3 ##

# 사건 : IP 주소를 이용하여 범인이 있는 위치를 추적하라!

# 힌트 : IP주소에서 위치를 나타내는 숫자만 뽑아라!
# 처음 세 숫자 : 국가
# 그 다음 세 숫자 : 구체적인 위치

ip_map_country = {'121':'Guam','45':'Brazil','197':'Namibia','14':'Japan','185':'Spain','78':'France','103':'Singapol','119':'Netherlands','89':'Fiji island','91':'Bulgaria','14':'china','5':'Poland','45':'Philippines','77':'Finland','85':'Serbia','160':'Morocco','88':'Lithuania','46':'Armenia','199':'Switzerland','170':'Argentina','115':'Mongolia','23':'United States','200':'Mexico','5':'Russia','80':'Germany','109':'Island','196':'Cuba','41':'Kenya','185':'Czechoslovakia','14':'Australia','80':'Algeria','43':'Vietnam','103':'Laos'}
ip_map_address = {'121':'western donnie AVE-17','45':'Maureen plaza -70','197':'National Science Building-16','14':'East Lansing MI-4','185':'Memphis street-197','78':'Lauren Street_50','103':'Louis Mo-19','89':'William Street-5','235':'Upper Alma Road-9','91':'Parla AVE-80','14':'New sum Street-193','5':'Years building-8','45':'Phlia AVE-55','77':'Fin Street-90','85':'Serbia building-6','160':'Eckman horse Street-10','88':'Lith building-1002','46':'Ralph AVE-22','199':'Suite Street 179','170':'Argen AVE-66','115':'Mon von AVE-80','23':'United Sorborn building-78','200':'Ashford APT-27','5':'Cond Garden hills-8','80':'Luke Plaza-25','109':'Parlia Apt-103','196':'Cubanian Street-5','41':'Calle Amapolas Apt-105','185':'Czech AVE-72','14':'Del Mar Apt-26','80':'East Algeria Street-2','43':'Upper Julian AVE-26','103':'Maximilian Apt-8'}

loc_code = real_ip.split(".")
country = loc_code[0]
print(ip_map_country[country]) # 실행 결과 : Netherlands

address = loc_code[1]
print(ip_map_address[address]) # 실행 결과 : Upper Alma Road-9
